------------------------------------------------------------------------------------------------------------------------------------------------------------------------
序号|	命令								|	作用											|	适用环境								|	附带影响
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1	|	git init							|	对当前文件夹进行git初始化，生成.git配置目录		|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2	|	git remote -v						|	显示远程仓库的基本信息 							|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3	|	git remote show origin				|	显示远程仓库的详细信息，包括哪些分支			|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4	|	git fetch							|	从远程库中拉取所有你还没有的数据				|	保持本地仓库与远程库一致				|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5	|	git merge 分支a 					|	将‘分支a’合并到当前分支							|											|
	|	git mergetool						|	合并冲突查询									|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6	|	git pull		 					|	拉取远程库 至 本地库+工作区						|	= git fetch + git merge					|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7	|	git status		 					|	工作区是否修改、修改是否添加至暂存区、暂存区是否添加至本地仓库								|
	|	git status -s						|	简化显示：M 代表modified，红色为未添加暂存区、绿色为已添加至暂存区							|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8	|	git diff		 					|	比较工作区与暂存区								|											|
	|	git diff --cached	 				|	比较暂存区与最新本地版本库（本地库中最近一次commit的内容）									|
	|	git diff HEAD						|	比较工作区与最新本地版本库						|											|
	|	git diff [<c-id>] [<c-id>]			|	比较两个commit-id之间的差异						|											|
	|	git diff 文件名						|	上诉扩展，指定文件对比							|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9	|	git log		 						|	查看所有提交过的版本信息						|											|
	|	git log --oneline	 				|	简化显示，显示版本号和提交时的备注信息			|											|
	|	git log --author=“某人”				|	查看“某人”提交记录								|											|
	|	git log --left-right 分支1...分支2	|	查看两个分支各自的提交记录						|											|
	|	git reflog							|	查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）					|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10	|	git branch		 					|	查看本地分支									|											|
	|	git branch -a		 				|	查看远程分支									|											|
	|	git btanch -av						|	查看远程及本地分支								|											|	
	|	git branch -d 分支名				|	删除分支										|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11	|	git checkout -b 分支a		 		|	创建分支a										|											|
	|	git checkout 分支a					|	切换至分支a										|											|
	|	git checkout -- 文件名				|	只撤销工作区内 ‘对应文件’ 的修改				|											|
	|	git checkout .						|	只撤销工作区内 ‘所有文件’ 的修改				|											|	
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12	|	git add  -a					 		|	添加工作区所有变化至暂存区						|											|
	|	git add  -u							|	添加工作区被修改modified和被删除deleted文件，不包含新建new文件								|
	|	git add .							|	添加工作区新建new文件和被修改modified文件，不包含被删除文件									|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13	|	git commit  -m 	"提交日志"			|	将暂存区提交至本地库，带提交日志				|											|
	|	git commit  --amend 				|	上次的commit撤销，提交本次，用于再次提交		|											|											|
	|	git commit -a -m "提交日志"			|	快速提交，包含工作区添加至暂存区并提交至本地库	|											|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14	|	git reset HEAD						|	远程库(push)不撤销、本地库(commit)不撤销、只撤销暂存区(add操作)、工作区(changed操作)不撤销	|
	|	git reset HEAD 文件a				|	同上，只限于文件a																			|
	|	git reset --soft					|	远程库(push)不撤销、只撤销本地库(commit)、暂存区(add操作)不撤销、工作区(changed操作)不撤销	|
	|	git reset --soft 文件a				|	同上，只限于文件a																			|
	|	git reset --mixed					|	远程库(push)不撤销、撤销本地库(commit)及暂存区(add操作)、工作区(changed操作)不撤销			|	默认
	|	git reset --mixed 文件a				|	同上，只限于文件a																			|
	|	git reset --hard					|	远程库(push)不撤销、只撤销本地库(commit)及暂存区(add操作)及工作区(changed操作)				|
	|	git reset --hard 文件a				|	同上，只限于文件a																			|
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15	|	git stash save “存储日志”			|	存储本地库，带存储日志							|											|
	|	git stash lish						|	查看stash了那些存储								|											|
	|	git stash show						|	显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，可添加后缀：stash@{num}，num就是你想查看的第几个stash
	|	git stash apply						|	应用某个存储,但不会把存储从存储列表中删除，可添加后缀：stash@{num}
	|	git stash pop						|	恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下，添加后缀：stash@{num}
	|	git stash drop stash@{num}			|	丢弃stash@{$num}存储，从列表中删除这个存储
	|	git stash clear						|	删除所有缓存的stash

===========================================================================  实际开发过程 : A ===========================================================================
参考：https://blog.csdn.net/weixin_44018338/article/details/98881164
思路：先开发，先暂存自己的修改，再拉取最新，再弹出自己的暂存(合并和解决冲突)，最后添加、提交、上传
1、	git stash save "my current modified......." //存储当前修改至stash栈区
	git pull									//拉取最新至工作目录
2、	git stash pop								//将自己暂存的代码与git pull合并(类似git merge)
3、 git add xxx
	git commit -m "提交日志"
	git push
	
===========================================================================  实际开发过程 : B ===========================================================================
思路：先拉取最新，再创建开发分支，在开发分支上开发，再切回主分支并合并开发分支(合并和解决冲突)，最后添加、提交、上传
0、	git diff				//比较工作区与暂存区
	git status				//工作区是否修改、修改是否添加至暂存区、暂存区是否添加至本地仓库	
1、	git pull
2、	git checkout -b dev01//创建分支dev01 在此分支上开发
3、	git checkout master//切回master分支
4、	git merge dev01//合并开发分支dev01至master分支
	无冲突：Fast-forwordward ....
	有冲突：可采用git mergetool来查看并解决冲突
5、 git add xxx
	git commit -m "提交日志"
	git push  
	
	1
	
	
	
	
	
	
	
	